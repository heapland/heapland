include "application.conf"

play.crypto.secret="ZzATvUJVVbQ70@XV!bW8neqZlv8IkKL"

# Allow all proxies for Heroku so that X-Forwarded headers can be read by Play
# ~~~~~
play.http.forwarded.trustedProxies=["0.0.0.0/0", "::/0"]

db.default.url=${?DB_URL}
db.default.username=${?DB_USER}
db.default.password=${?DB_PASSWORD}
db.default.poolInitialSize=5
db.default.poolMaxSize=20
db.default.poolConnectionTimeoutMillis=3000
db.default.poolValidationQuery="select 1 as one"
db.default.poolFactoryName="commons-dbcp2"

play.modules.enabled += "org.flywaydb.play.PlayModule"
play.modules.enabled += "modules.GigahexModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

#Flyway configuration
db.default.migration.schemas=["public"]
db.default.migration.baselineOnMigrate=true
db.default.migration.initOnMigrate=true
db.default.migration.showInsertQuery=true
db.default.migration.auto=true
db.default.migration.table="schema_version"

play.filters.cors {
  allowedHttpMethods = ["GET", "POST", "PUT", "OPTIONS", "DELETE"]
}

play {

  server {

    # The root directory for the Play server instance. This value can
    # be set by providing a path as the first argument to the Play server
    # launcher script. See `ServerConfig.loadConfiguration`.
    dir = ${?user.dir}

    # HTTP configuration
    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 9001
      port = ${?PLAY_HTTP_PORT}
      port = ${?http.port}

      # The interface address to bind to.
      address = "0.0.0.0"
      address = ${?PLAY_HTTP_ADDRESS}
      address = ${?http.address}

      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = 75 seconds
    }


    # The path to the process id file created by the server when it runs.
    # If set to "/dev/null" then no pid file will be created.
    pidfile.path = ${play.server.dir}/RUNNING_PID
    pidfile.path = ${?pidfile.path}

    websocket {
      # Maximum allowable frame payload length. Setting this value to your application's
      # requirement may reduce denial of service attacks using long data frames.
      frame.maxLength = 64k
      frame.maxLength = ${?websocket.frame.maxLength}
    }

    debug {
      # If set to true this will attach an attribute to each request containing debug information. If the application
      # fails to load (e.g. due to a compile issue in dev mode), then this configuration value is ignored and the debug
      # information is always attached.
      #
      # Note: This configuration option is not part of Play's public API and is subject to change without the usual
      # deprecation cycle.
      addDebugInfoToRequests = false
    }

    # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
    # number of cookies and size of cookie values.
    max-header-size = 8k

    # If a request contains a Content-Length header it will be checked against this maximum value.
    # If the value of a given Content-Length header exceeds this configured value, the request will not be processed
    # further but instead the error handler will be called with Http status code 413 "Entity too large".
    # If set to infinite or if no Content-Length header exists then no check will take place at all
    # and the request will continue to be processed.
    # Play uses the concept of a `BodyParser` to enforce this limit, so we set it to infinite.
    max-content-length = infinite
  }

  editor = ${?PLAY_EDITOR}

}

play.assets {
  path = "/public"
  urlPrefix = "/assets"
  libsodium = "lib/libsodium.so"
}

gigahex {
  packages = "/var/gigahex"
}

# Play mailer
play.mailer {
  host = "localhost"
  port = 2500
  mock = false
  tls = false
  tlsRequired = false
}

silhouette {

  # Authenticator settings
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false
  authenticator.httpOnlyCookie=true
  authenticator.sameSite="Lax"
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=4 hours
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.signer.key = "GvdkG1F*U$X#" // A unique encryption key
  authenticator.crypter.key = "GvdkG1Fsdfee$X#" // A unique encryption key

  authenticator.fieldName = "X-Auth-Token"
  authenticator.requestParts = ["headers"]
  authenticator.issuerClaim = "gx.launcher"
  authenticator.sharedSecret = "ycg%PGjXMlAXriT8xG#D6AJgvp65CX2b^7qFOs435s3"

  # OAuth1 token secret provider settings
  oauth1TokenSecretProvider.cookieName="OAuth1TokenSecret"
  oauth1TokenSecretProvider.cookiePath="/"
  oauth1TokenSecretProvider.secureCookie=true // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth1TokenSecretProvider.httpOnlyCookie=true
  oauth1TokenSecretProvider.sameSite="None"
  oauth1TokenSecretProvider.expirationTime=5 minutes

  oauth1TokenSecretProvider.signer.key = "[changeme]" // A unique encryption key
  oauth1TokenSecretProvider.crypter.key = "[changeme]" // A unique encryption key

  # Social state handler
  socialStateHandler.signer.key = "[changeme]" // A unique encryption key

  # CSRF state item handler settings
  csrfStateItemHandler.cookieName="OAuth2State"
  csrfStateItemHandler.cookiePath="/"
  csrfStateItemHandler.secureCookie=true // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  csrfStateItemHandler.httpOnlyCookie=true
  #csrfStateItemHandler.sameSite="Lax"
  csrfStateItemHandler.expirationTime=5 minutes

  csrfStateItemHandler.signer.key = "[changeme]" // A unique encryption key
}
